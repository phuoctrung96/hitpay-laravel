<?php

namespace App\Console\Commands;

use App\Business;
use App\Business\HotglueJob;
use App\Business\HotglueIntegration;
use App\Business\HotglueProductTracker;
use App\Business\ProductVariation;
use App\Imports\ProductFeedImport;
use Illuminate\Console\Command;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class ProceedHotglueFeed extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'proceed:hotglue-feed {--job_id=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Process product csv generated by hotglue from aws s3 to hitpay';

    private const FILE = 'products.csv';
    private const TEMPLATE = ["SKU","Name","Description","Price","Quantity","Image","Publish","Manage Inventory"];
    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        Log::info('Hotglue product feed start process');
        $jobId = $this->option('job_id');
        if ($hotglueJob = HotglueJob::with('hotglueIntegration')->whereJobId($jobId)->first()) {
            $business = Business::find($hotglueJob->hotglueIntegration->business_id);
            if (!$business) {
                $hotglueJob->status = HotglueJob::INVALID;
                $hotglueJob->update();
                Log::critical('Hotglue product feed business not found ' . $hotglueJob->hotglueIntegration->business_id);
                return;
            }

            $awsPath = 'hotglue/products/' . $business->id . '/flows/' . $hotglueJob->hotglueIntegration->flow . '/jobs/' . $hotglueJob->job_id . '/' . static::FILE;
            if ($awsFile = Storage::disk('s3_hotglue')->exists($awsPath)) {
                Log::info('Hotglue product feed aws csv file exists');
                $csv = Storage::disk('s3_hotglue')->get($awsPath);
                $csvInArray = $this->csvToArray($csv);
                $source = $hotglueJob->hotglueIntegration->source;

                if ($source === HotglueJob::SHOPIFY) {
                    $rows = $this->mapShopify($csvInArray);
                } elseif ($source === HotglueJob::WOOCOMMERCE) {
                    $rows = $this->mapWooCommerce($csvInArray);
                }

                if (strpos($hotglueJob->job_name, 'scheduled-job') !== false) {
                    Log::info('Hotglue product feed perform recurring sync');
                    foreach ($rows as $index => $row) {
                        if ($index === 0) {
                            continue;
                        }
                        $productExists = HotglueProductTracker::whereStockKeepingUnit($row[0])->whereNotNull('stock_keeping_unit')->first();
                        if ($productExists) {
                            $product = $business->productBases()->where('stock_keeping_unit', $row[0])->first();
                            if ($product->isProduct()) {
                                $product = ProductVariation::where('parent_id', $product->id)->first();
                            }
                            $product->update(['quantity' => $row[4]]);
                            $rows->forget($index);
                        }
                    }
                    $this->importEcommerceProduct($business, $rows, $hotglueJob);
                } else {
                    Log::info('Hotglue product feed perform initial sync');
                    $this->importEcommerceProduct($business, $rows, $hotglueJob);
                }

                if ($hotglueIntegration = HotglueIntegration::find($hotglueJob->hotglue_integration_id)) {
                    $hotglueJobs = HotglueJob::whereHotglueIntegrationId($hotglueJob->hotglue_integration_id)->get();
                    if ($hotglueJobs->count() > 0 && $hotglueIntegration->initial_sync_date === null) {
                        $hotglueIntegration->initial_sync_date = now();
                    }
                    $hotglueIntegration->last_sync_date = now();
                    $hotglueIntegration->update();
                }

                $hotglueJob->status = HotglueJob::SYNCED;
                $hotglueJob->sync_date = now();
                $hotglueJob->update();

                Log::info('Hotglue product feed successfully synced products from ' . $source . ' to hitpay per jobid: ' . $jobId . ' for business_id: ' . $business->id);
            } else {
                $hotglueJob->status = HotglueJob::INVALID;
                $hotglueJob->update();
                Log::critical('Hotglue product feed aws file not found per path: ' . $awsPath);
            }
        } else {
            Log::critical('Hotglue product feed no job found per job_id: ' . $jobId);
        }
    }

    private function csvToArray($csv)
    {
        $delimiter = ",";
        $enclosure = '"';
        $escape = "\\" ;
        $header = NULL;
        $data = [];

        // Remove next line after html tag
        $csv = str_replace(">\n", ">", $csv);

        $rows = array_filter(explode(PHP_EOL, $csv));
        foreach ($rows as $row) {
            $row = str_getcsv ($row, $delimiter, $enclosure , $escape);
            if (!$header) {
                $header = $row;
            } else {
               $data[] = array_combine($header, $row);
            }
        }
        return $data;
    }

    private function stringToArray($string)
    {
        $string = str_replace("'", '"', $string);
        $string = str_replace("None", '""', $string);
        $string = str_replace("True", true, $string);
        $string = str_replace("False", false, $string);
        return json_decode($string, true);
    }

    private function mapShopify($csvInArray): Collection
    {
        // Default row, void during the import
        $collection[] = static::TEMPLATE;
        foreach ($csvInArray as $row) {
            $variants = $this->stringToArray($row['variants']);
            $image = $this->stringToArray($row['image']);

            $data[0] = $variants[0]['sku'] ?? null;
            $data[1] = $row['title'];
            $data[2] = strip_tags($row['body_html']);
            $data[3] = $variants[0]['price'];
            $data[4] = (int) $variants[0]['inventory_quantity'];
            $data[5] = $image['src'] ?? null;
            $data[6] = 1;
            $data[7] = 1;
            $data[8] = $row['currency'];
            $collection[] = $data;
        }
        return collect($collection);
    }

    private function mapWooCommerce($csvInArray): Collection
    {
        // Default row, void during the import
        $collection[] = static::TEMPLATE;
        foreach ($csvInArray as $row) {
            $image = $this->stringToArray($row['images']);
            $description = !empty($row['short_description']) ? strip_tags($row['short_description']) : strip_tags($row['description']);
            
            $data[0] = $row['sku'];
            $data[1] = $row['name'];
            $data[2] = $description;
            $data[3] = $row['price'];
            $data[4] = (int) $row['stock_quantity'];
            $data[5] = $image[0]['src'] ?? null;
            $data[6] = $row['status'] === 'publish' ? 1 : 0;
            $data[7] = $row['manage_stock'] === 'True' ? 1 : 0;
            $collection[] = $data;
        }
        return collect($collection);
    }

    private function importEcommerceProduct($business, $rows, $hotglueJob)
    {
        $productImporter = new ProductFeedImport($business);
        $productImporter->collection($rows);

        foreach ($rows as $index => $row) {
            if ($index === 0) {
                continue;
            }
            HotglueProductTracker::firstOrCreate([
                'hotglue_job_id' => $hotglueJob->id,
                'stock_keeping_unit' => empty($row[0]) ? null : $row[0],
                'name' => $row[1],
                'description' => empty($row[2]) ? null : $row[2],
                'price' => $row[3],
                'quantity' => $row[4],
                'image_url' => empty($row[5]) ? null : $row[5],
                'published' => $row[6],
                'manage_inventory' => $row[7],
                'is_shopify' => true
            ]);
        }
    }
}
