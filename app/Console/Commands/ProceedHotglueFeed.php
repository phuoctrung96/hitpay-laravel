<?php

namespace App\Console\Commands;

use App\Business;
use App\Business\HotglueJob;
use App\Business\HotglueLocation;
use App\Business\HotglueIntegration;
use App\Business\HotglueProductTracker;
use App\Business\ProductVariation;
use App\Imports\ProductFeedImport;
use App\Notifications\HotglueSyncNotification;
use Illuminate\Console\Command;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use League\Csv\Reader;

class ProceedHotglueFeed extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'proceed:hotglue-feed {--job_id=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Process product csv generated by hotglue from aws s3 to hitpay';

    private const PRODUCT_FILE = 'products.csv';
    private const LOCATION_FILE = 'locations.csv';
    private const SHOP_FILE = 'shop.csv';
    private const TEMPLATE = ["SKU","Name","Description","Price","Quantity","Image","Publish","Manage Inventory","Currency","Variants","Integration","Item ID"];

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function handle() : int
    {
        Log::info('Hotglue product feed start process');
        $jobId = $this->option('job_id');
        if ($hotglueJob = HotglueJob::with('hotglueIntegration')->where('job_id', $jobId)->first()) {
            $business = Business::find($hotglueJob->hotglueIntegration->business_id);
            if (!$business) {
                $hotglueJob->status = HotglueJob::INVALID;
                $hotglueJob->update();
                Log::critical('Hotglue product feed business not found ' . $hotglueJob->hotglueIntegration->business_id);
                return 1;
            }

            $awsShopDetailsFilePath = 'hotglue/products/' . $business->id . '/flows/' . $hotglueJob->hotglueIntegration->flow . '/jobs/' . $hotglueJob->job_id . '/' . self::SHOP_FILE;
            $file = strpos($hotglueJob->job_name, 'initial') !== false && !$hotglueJob->hotglueIntegration->selected_location_id ? self::LOCATION_FILE : self::PRODUCT_FILE;
            $awsPath = 'hotglue/products/' . $business->id . '/flows/' . $hotglueJob->hotglueIntegration->flow . '/jobs/' . $hotglueJob->job_id . '/' . $file;
            if (Storage::disk('s3_hotglue')->exists($awsPath)) {
                Log::info('Hotglue product feed aws csv file exists');
                $csv = Storage::disk('s3_hotglue')->get($awsPath);
                $source = $hotglueJob->hotglueIntegration->source;

                try {
                    $csvInArray = $this->csvToArray($csv);

                    if (strpos($hotglueJob->job_name, 'initial') !== false && !$hotglueJob->hotglueIntegration->selected_location_id) {
                        foreach ($csvInArray as $location) {
                            HotglueLocation::firstOrCreate([
                                'ecommerce_location_id' => $location['id'],
                                'hotglue_integration_id' => $hotglueJob->hotglueIntegration->id,
                            ], [
                                'ecommerce_location_id' => $location['id'],
                                'hotglue_integration_id' => $hotglueJob->hotglueIntegration->id,
                                'name' => $location['name'],
                                'active' => $location['active'] === 'True'
                            ]);

                            if (count($csvInArray) < 2) {
                                $hotglueIntegration = HotglueIntegration::find($hotglueJob->hotglue_integration_id);
                                if ($hotglueIntegration) {
                                    $hotglueIntegration->selected_location_id = $location['id'];
                                    $hotglueIntegration->update();
                                }
                            }
                        }

                        $hotglueJob->status = HotglueJob::CREATED;
                        $hotglueJob->update();
                        return 0;
                    }

                    if ($source === HotglueJob::SHOPIFY) {
                        $rows = $this->mapShopify($csvInArray, $awsShopDetailsFilePath);
                    } elseif ($source === HotglueJob::WOOCOMMERCE) {
                        $rows = $this->mapWooCommerce($csvInArray);
                    }

                    if (strpos($hotglueJob->job_name, 'scheduled-job') !== false) {
                        Log::info('Hotglue product feed perform recurring sync');
                        foreach ($rows as $index => $row) {
                            if ($index === 0) {
                                continue;
                            }
                            $productExists = HotglueProductTracker::where('item_id', $row[11])->whereNotNull('item_id')->first();
                            if ($productExists) {
                                if ($product = $business->productBases()->where('shopify_inventory_item_id', $row[11])->first()) {
                                    if (!$product->isProduct()) {
                                        $product = $business->productBases()->find($product->parent_id);
                                    }

                                    // product manageable or not
                                    Business\ProductBase::unguarded(function () use ($product, $row) {
                                        $product && $product->update([
                                            'quantity' => $row[7] ? 1 : 0
                                        ]);
                                    });
                                }

                                // variations do updates
                                if (isset($row[9]) && count($row[9]) >= 1) {
                                    $variations = $row[9]['variants'];
                                    foreach ($variations as $variant) {
                                        $productVariant = $business->productVariations()->where('shopify_inventory_item_id', $variant['id'])->first();

                                        if ($productVariant) {
                                            Business\ProductVariation::unguarded(function () use ($productVariant, $variant) {
                                                $productVariant->update([
                                                    'quantity' => $variant['inventory_quantity'],
                                                    'price' => $variant['price']
                                                ]);
                                            });
                                        }
                                    }
                                } else {
                                    if ($productVariant = $business->productVariations()->where('shopify_inventory_item_id', $row[11])->first()) {
                                        Business\ProductVariation::unguarded(function () use ($productVariant, $row) {
                                            $productVariant->update([
                                                'quantity' => $row[4],
                                                'price' => $row[3]
                                            ]);
                                        });
                                    }
                                }

                                // remove product from rows to exclude it from product bulk import
                                $rows->forget($index);
                            }
                        }
                    } else {
                        Log::info('Hotglue product feed perform initial sync');
                    }
                    $this->importEcommerceProduct($business, $rows, $hotglueJob);

                    if ($hotglueIntegration = HotglueIntegration::find($hotglueJob->hotglue_integration_id)) {
                        $hotglueJobs = HotglueJob::where('hotglue_integration_id', $hotglueJob->hotglue_integration_id)->get();
                        if ($hotglueJobs->count() > 0 && $hotglueIntegration->initial_sync_date === null) {
                            $hotglueIntegration->initial_sync_date = now();
                        }
                        $hotglueIntegration->last_sync_date = now();
                        $hotglueIntegration->update();
                    }

                    $hotglueJob->status = HotglueJob::SYNCED;
                    $hotglueJob->sync_date = now();
                    $hotglueJob->update();

                    Log::info('Hotglue product feed successfully synced products from ' . $source . ' to hitpay per jobid: ' . $jobId . ' for business_id: ' . $business->id);
                    $business->notify(new HotglueSyncNotification($source, 'hitpay', $hotglueJob->job_id, true));

                } catch (\Exception $e) {
                    $hotglueJob->status = HotglueJob::QUEUE_FAILED;
                    $hotglueJob->update();
                    $business->notify(new HotglueSyncNotification($source, 'hitpay', $hotglueJob->job_id));
                    Log::critical('Hotglue job queue failed to sync products per jobid: ' . $hotglueJob->job_id . ' for business_id: ' . $business->id . ' error details: ' . $e->getMessage() . "\n" . $e->getTraceAsString());
                    return 1;
                }
            } else {
                $hotglueJob->status = HotglueJob::INVALID;
                $hotglueJob->update();
                Log::critical('Hotglue product feed aws file not found per path: ' . $awsPath);

                return 1;
            }
        } else {
            Log::critical('Hotglue product feed no job found per job_id: ' . $jobId);

            return 1;
        }

        return 0;
    }

    /**
     * @throws \League\Csv\InvalidArgument
     * @throws \League\Csv\Exception
     */
    private function csvToArray(string $csv) : array
    {
        $reader = Reader::createFromString($csv);
        $reader->setEscape('"');
        $reader->setHeaderOffset(0);

        foreach ($reader->getRecords() as $row) {
            $data[] = $row;
        }

        return $data ?? [];
    }

    private function stringToArray($string)
    {
        try {
            return json_decode($string, true, 512, JSON_THROW_ON_ERROR);
        } catch (\Exception $e) {
            $replacements = [
                '{\'' => '{"',
                '\'}' => '"}',
                '\':' => '":',
                ', \'' => ', "',
                ': \'' => ': "',
                '\', ' => '", ',
                ': None' => ': null',
                ': True' => ': true',
                ': False' => ': false',
            ];
            foreach ($replacements as $source => $target) {
                $string = str_replace($source, $target, $string);
            }
            return json_decode($string, true);
        }
    }

    private function mapShopify($csvInArray, $awsShopDetailsFilePath): Collection
    {
        // Default row, void during the import
        $collection[] = static::TEMPLATE;
        foreach ($csvInArray as $row) {
            $variants = $this->stringToArray($row['variants']);
            $sku = !empty(trim($variants[0]['sku'])) ? trim($variants[0]['sku']) : null;

            $productVariations = [];
            if ($variants && count($variants) > 1) {
                $options = $this->stringToArray($row['options']);
                $productVariations['options'] = collect($options)->pluck('name');

                foreach($variants as $variant) {
                    $variantQuantity = $variant['inventory_quantity'] ?? 0;
                    $variantQuantity = (int) $variantQuantity;
                    $variant['inventory_quantity'] = max($variantQuantity, 0);
                    $productVariations['variants'][] = $variant;
                }
            }

            $image = $this->stringToArray($row['image']);
            $quantity = $variants[0]['inventory_quantity'] ?? 0;
            $quantity = (int) $quantity;
            $manageInventory = $variants[0]['inventory_management'] === HotglueJob::SHOPIFY;
            $publishProduct = $row['status'] === 'active' ? 1 : 0;

            if (!isset($row['currency'])) {
                if (Storage::disk('s3_hotglue')->exists($awsShopDetailsFilePath)) {
                    $shopDetails = Storage::disk('s3_hotglue')->get($awsShopDetailsFilePath);
                    $shopDetails = $this->csvToArray($shopDetails);
                    $row['currency'] = $shopDetails[0]['currency'];
                } else {
                    $row['currency'] = 'SGD';
                }
            }

            $data[0] = $sku;
            $data[1] = $row['title'];
            $data[2] = strip_tags($row['body_html']);
            $data[3] = $variants[0]['price'] ?? 0;
            $data[4] = max($quantity, 0);
            $data[5] = $image['src'] ?? null;
            $data[6] = $publishProduct;
            $data[7] = $manageInventory;
            $data[8] = $row['currency'];
            $data[9] = $productVariations;
            $data[10] = 'hotglue';
            $data[11] = $variants[0]['id'];
            $collection[] = $data;
        }
        return collect($collection);
    }

    private function mapWooCommerce($csvInArray): Collection
    {
        // Default row, void during the import
        $collection[] = static::TEMPLATE;
        foreach ($csvInArray as $row) {
            $image = $this->stringToArray($row['images']);
            $description = !empty($row['short_description']) ? strip_tags($row['short_description']) : strip_tags($row['description']);

            $data[0] = $row['sku'];
            $data[1] = $row['name'];
            $data[2] = $description;
            $data[3] = $row['price'];
            $data[4] = (int) $row['stock_quantity'];
            $data[5] = $image[0]['src'] ?? null;
            $data[6] = $row['status'] === 'publish' ? 1 : 0;
            $data[7] = $row['manage_stock'] === 'True' ? 1 : 0;
            $collection[] = $data;
        }
        return collect($collection);
    }

    /**
     * @throws \ReflectionException
     * @throws \Exception
     */
    private function importEcommerceProduct($business, $rows, $hotglueJob)
    {
        $productImporter = new ProductFeedImport($business);
        $productImporter->collection($rows);

        foreach ($rows as $index => $row) {
            if ($index === 0) {
                continue;
            }

            if (isset($row[9]) && count($row[9]) > 1) {
                $variants = $row[9];
                foreach ($variants['variants'] as $variant) {
                    HotglueProductTracker::firstOrCreate([
                        'item_id' => $variant['id']
                    ], [
                        'hotglue_job_id' => $hotglueJob->id,
                        'item_id' => $variant['id'],
                        'stock_keeping_unit' => $variant['sku'] ?? null,
                        'name' => $variant['title'],
                        'description' => empty($row[2]) ? null : $row[2],
                        'price' => getRealAmountForCurrency(strtolower($row[8]), $variant['price']),
                        'quantity' => $variant['inventory_quantity'],
                        'image_url' => empty($row[5]) ? null : $row[5],
                        'published' => $row[6],
                        'manage_inventory' => $row[7],
                        'is_shopify' => true
                    ]);
                }
            } else {
                HotglueProductTracker::firstOrCreate([
                    'item_id' => $row[11]
                ], [
                    'hotglue_job_id' => $hotglueJob->id,
                    'item_id' => $row[11],
                    'stock_keeping_unit' => empty($row[0]) ? null : $row[0],
                    'name' => $row[1],
                    'description' => empty($row[2]) ? null : $row[2],
                    'price' => getRealAmountForCurrency(strtolower($row[8]), $row[3]),
                    'quantity' => $row[4],
                    'image_url' => empty($row[5]) ? null : $row[5],
                    'published' => $row[6],
                    'manage_inventory' => $row[7],
                    'is_shopify' => true
                ]);
            }
        }
    }
}
